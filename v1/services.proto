syntax = "proto3";
package apiv1;

option go_package = "github.com/wardle/concierge/apiv1";
option java_package = "com.eldrix.concierge.api";

import "model.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";

service Authenticator {

    // Login authenticates using the credentials specified and returns an authentication token
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    };
    // Refresh refreshes a currently valid token
    rpc Refresh(TokenRefreshRequest) returns (LoginResponse) {
        option (google.api.http) = {
            get: "/v1/refresh"
        };
    };
}

//////////////////////////////////////////////////////////////////////////////
// Identifiers service provides resolution and mapping of identifiers (system/value tuples)
service Identifiers {

    rpc GetIdentifier(Identifier) returns (google.protobuf.Any) {
        option (google.api.http) = {
            get: "/v1/identifier/{value}"
        };
    };

    rpc MapIdentifier(IdentifierMapRequest) returns (stream Identifier) {
        option (google.api.http) = {
            get: "/v1/map"
        };
    };
}

message IdentifierMapRequest {
    string system = 1;
    string value = 2;
    string target_uri = 3;
}

//////////////////////////////////////////////////////////////////////////////
service DocumentService {

    rpc PublishDocument(PublishDocumentRequest) returns (PublishDocumentResponse) {
        option (google.api.http) = {
            post: "/v1/document/publish"
            body: "document.data.data"
        };
    };
}

// PublishDocumentRequest publishes the document(s)
// The recipient identifier list contains identifiers of those who need to be notified about the document.
// The resolution of *how* that resolution occurs is at the discretion of the transport, so may conceivably
// be postal mail, email or some other notification / workflow system.
message PublishDocumentRequest {
    Document document = 1;
}

// PublishDocumentResponse is returned on successful publication
message PublishDocumentResponse {
    Identifier id = 1;
}

//////////////////////////////////////////////////////////////////////////////
// a work-in-progress
service NotificationService {

    rpc Notify(NotificationRequest) returns (NotificationResponse) {
        option (google.api.http) = {
            post: "/v1/notify"
            body: "*"
        };
    };
}

message NotificationRequest {
    Identifier recipient = 1;       // recipient of this notification
    Patient patient = 2;            // patient to which this notification refers
}

// incomplete
message NotificationResponse {
    Identifier id = 1;          // unique identifier for this notification
}

//////////////////////////////////////////////////////////////////////////////
// A directory of practitioners (staff directory)
service PractitionerDirectory {

    rpc SearchPractitioner(PractitionerSearchRequest) returns (stream Practitioner) {
        option (google.api.http) = {
            get: "/v1/practitioner/search"
        };
    };
}

message PractitionerSearchRequest {
    string system = 1;
    string username = 2;
    string first_name = 3;
    string last_name = 4;
}


