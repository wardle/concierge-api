syntax = "proto3";
package apiv1;

option go_package = "github.com/wardle/concierge/apiv1";
option java_package = "com.eldrix.concierge.api";

import "model.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service Authenticator {

    // Login authenticates using the credentials specified and returns an authentication token
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    };
    // Refresh refreshes a currently valid token
    rpc Refresh(TokenRefreshRequest) returns (LoginResponse) {
        option (google.api.http) = {
            get: "/v1/refresh"
        };
    };
}


// Identifiers service provides resolution and mapping of identifiers (system/value tuples)
service Identifiers {

    rpc GetIdentifier(Identifier) returns (google.protobuf.Any) {
        option (google.api.http) = {
            get: "/v1/identifier/{value}"
        };
    };

    rpc MapIdentifier(IdentifierMapRequest) returns (stream Identifier) {
        option (google.api.http) = {
            get: "/v1/identifier/{value}/map"
        };
    };
}

message IdentifierMapRequest {
    string system = 1;
    string value = 2;
    string target_uri = 3;
}


service DocumentService {

    rpc PublishDocument(PublishDocumentRequest) returns (PublishDocumentResponse) {
        option (google.api.http) = {
            post: "/v1/document/publish"
            body: "data.data"
        };
    };
}

// PublishDocumentRequest publishes the document
// The recipient identifier list contains identifiers of those who need to be notified about the document.
// The resolution of *how* that resolution occurs is at the discretion of the transport, so may conceivably
// be postal mail, email or some other notification / workflow system.
message PublishDocumentRequest {
    Identifier id = 1;  // unique identifier for this document, value typically being a UUID but some implementations will use system/primarykey approach
    Patient patient = 2;  // patient to which this refers - 
    repeated Identifier authors = 3; // author(s) of the document
    repeated Identifier signed_by = 4;  // signed by - may be author or multiple, of course
    repeated Identifier responsible = 5; // responsible author(s) (e.g. consultant)
    Identifier administrator = 6; // administrator/typed/prepared by  (may be same as author)
    Identifier encounter = 7; // encounter to which this document refers
    repeated Identifier recipients = 8; // recipients - e.g. the patient, other practitioners, other teams. Resolution of these is transport specific.
    string title = 9; // title (description) of this document
    google.protobuf.Timestamp date_time = 10;   // logical date/time of the document - may be the "event" date time
    google.protobuf.Timestamp typed_date_time = 11; // when document typed
    google.protobuf.Timestamp signed_date_time = 12; // when document signed off
    Attachment data = 13;
}

// PublishDocumentResponse is returned on successful publication
message PublishDocumentResponse {
    Identifier id = 1;
}


// A directory of practitioners (staff directory)
service PractitionerDirectory {

    rpc SearchPractitioner(PractitionerSearchRequest) returns (stream Practitioner) {
        option (google.api.http) = {
            get: "/v1/practitioner/search"
        };
    };
}

message PractitionerSearchRequest {
    string system = 1;
    string username = 2;
    string first_name = 3;
    string last_name = 4;
}


